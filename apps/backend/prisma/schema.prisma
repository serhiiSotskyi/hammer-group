generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // or "postgresql" if using Postgres
  url      = env("DATABASE_URL")
}

enum SchemaStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Category {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  slug           String        @unique
  products       Product[]
  collections    Collection[]
  schemas        ParamSchema[]
  quotes         Quote[]
  activeSchemaId Int?        @unique
  activeSchema   ParamSchema?  @relation("ActiveSchema", fields: [activeSchemaId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Product {
  id             Int        @id @default(autoincrement())
  categoryId     Int
  category       Category   @relation(fields: [categoryId], references: [id])
  name           String
  slug           String     @unique
  basePriceCents Int
  imageUrl       String?
  description    String?
  collectionId   Int?
  collection     Collection? @relation(fields: [collectionId], references: [id])
  doorType       DoorType   @default(STANDARD)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  quotes         Quote[]
}

model Collection {
  id         Int       @id @default(autoincrement())
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  name       String
  slug       String
  imageUrl   String?
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([categoryId, slug])
}

model ParamSchema {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  version     Int
  status      SchemaStatus @default(DRAFT)
  label       String
  json        Json
  checksum    String
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  activeFor   Category?    @relation("ActiveSchema")

  @@unique([categoryId, version])
}

model Quote {
  id               String   @id @default(cuid())
  productId        Int
  product          Product  @relation(fields: [productId], references: [id])
  categoryId       Int
  category         Category @relation(fields: [categoryId], references: [id])

  selections       Json
  schemaVersionId  Int?
  schemaLabel      String?
  schemaChecksum   String?
  schemaSnapshot   Json

  basePriceCents   Int
  adjustmentsCents Int
  totalPriceCents  Int
  breakdown        Json
  resolvedSelections Json?

  customerName     String?
  customerEmail    String?
  customerPhone    String?
  notes            String?

  delivered        Boolean  @default(false)
  adminNotes       String?

  // FX snapshot at time of quote
  baseCurrency     String?  @default("USD")
  quoteCurrency    String?  @default("UAH")
  fxRate           Float?
  fxSource         String?
  fxAsOf           DateTime?

  createdAt        DateTime @default(now())
}

enum InquiryType {
  GENERAL
  FURNITURE
}

enum DoorType {
  STANDARD
  BUDGET
}

model Inquiry {
  id        Int          @id @default(autoincrement())
  type      InquiryType
  name      String
  email     String?
  phone     String?
  message   String?
  delivered Boolean      @default(false)
  adminNotes String?
  createdAt DateTime     @default(now())
}

model FurniturePortfolio {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Cached daily FX rates
model FxRate {
  id        Int      @id @default(autoincrement())
  base      String
  quote     String
  rate      Float
  asOfDate  DateTime
  source    String   @default("MANUAL")
  createdAt DateTime @default(now())

  @@unique([base, quote, asOfDate])
}

model AdminUser {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  lastLoginAt  DateTime?
}
